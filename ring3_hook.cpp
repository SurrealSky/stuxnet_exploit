#include<Windows.h>
#include <TlHelp32.h>
#include<DbgHelp.h>

#pragma comment(lib,"imagehlp.lib")

typedef HANDLE(WINAPI* PFNFindFirstFile)(LPCTSTR lpFileName, LPWIN32_FIND_DATA lpFindFileData);
typedef BOOL(WINAPI* PFNFindNextFile)(HANDLE hFindFile, LPWIN32_FIND_DATA lpFindFileData);

DWORD* MyFindFirstFileWAddr, * FindFirstFileWAddr;
DWORD* MyFindNextFileWAddr, * FindNextFileWAddr;

bool bPatchMatch = false;

HANDLE WINAPI MyFindFirstFileW(LPCTSTR lpFileName, LPWIN32_FIND_DATA lpFindFileData)
{
	HANDLE hFind=0;
	return hFind;
}

BOOL WINAPI MyFindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATA lpFindFileData)
{
	BOOL bReturn=FALSE;
	return bReturn;
}

void IATFind(DWORD* FromAddr, DWORD* ToAddr, const wchar_t* module)
{
	PIMAGE_IMPORT_DESCRIPTOR pImportDescriptor;
	PIMAGE_THUNK_DATA		pThunkData;
	ULONG uSize;
	DWORD* Addr2;
	DWORD dwOLD;
	MEMORY_BASIC_INFORMATION mbi;
	HMODULE hMod = GetModuleHandleW(module);
	pImportDescriptor = (PIMAGE_IMPORT_DESCRIPTOR)ImageDirectoryEntryToData(hMod,true, IMAGE_DIRECTORY_ENTRY_IMPORT, &uSize);
	if (!pImportDescriptor)
		return;
	while (pImportDescriptor->Name)
	{
		char* szModName = (char*)((PBYTE)hMod + pImportDescriptor->Name);
		OutputDebugStringA(szModName);
		if (strcmp(szModName, "kernel32.dll") == 0)
		{
			pThunkData = (PIMAGE_THUNK_DATA32)((PBYTE)hMod + pImportDescriptor->FirstThunk);
			while (pThunkData->u1.Function)
			{
				Addr2 = (DWORD*)pThunkData->u1.Function;
				if ((DWORD)Addr2 == (DWORD)FromAddr)
				{
					VirtualQuery(&(pThunkData->u1.Function), &mbi, sizeof(mbi));
					VirtualProtect(&(pThunkData->u1.Function), sizeof(DWORD), PAGE_READWRITE, &dwOLD);
					WriteProcessMemory(GetCurrentProcess(), &(pThunkData->u1.Function), &ToAddr, sizeof(DWORD), NULL);
					VirtualProtect(&(pThunkData->u1.Function), sizeof(DWORD), dwOLD, 0);
					break;
				}
				pThunkData++;
			}
		}
		pImportDescriptor++;
	}
}

bool DLLFind()
{
	HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE| TH32CS_SNAPMODULE32, GetCurrentProcessId());
	if (hSnap == INVALID_HANDLE_VALUE)
	{
		OutputDebugString(L"CreateToolhelp32Snapshot() failed ");
		return false;
	}
	MODULEENTRY32 me;
	me.dwSize = sizeof(me);
	Module32First(hSnap, &me);
	do
	{
		IATFind(FindFirstFileWAddr, MyFindFirstFileWAddr, me.szModule);
		IATFind(FindNextFileWAddr, MyFindNextFileWAddr, me.szModule);
	} while (Module32Next(hSnap, &me));
	CloseHandle(hSnap);
}

DWORD WINAPI APIHOOK(LPVOID lpParameter)
{
	HMODULE h;
	h = GetModuleHandle(L"kernel32.dll");
	MyFindFirstFileWAddr = (DWORD*)MyFindFirstFileW;
	FindFirstFileWAddr = (DWORD*)GetProcAddress(h, "FindFirstFileW");
	MyFindNextFileWAddr = (DWORD*)MyFindNextFileW;
	FindNextFileWAddr = (DWORD*)GetProcAddress(h, "FindNextFileW");
	CloseHandle(h);
	while (1)
	{
		DLLFind();
		Sleep(100000);
	}
	return 0;
}