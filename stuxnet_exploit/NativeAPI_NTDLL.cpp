#include <windows.h>
#include <ntsecapi.h>

#include "NativeAPI_NTDLL.h"

//
//NativeAPI_NTDLL Functions
//
NTSTATUS
NTAPI
RtlInitUnicodeString(
	PUNICODE_STRING DestinationString,
	PCWSTR SourceString
)
{
	NTSTATUS ret = NULL;
	typedef NTSTATUS(WINAPI* lpAddFun)(PUNICODE_STRING, PCWSTR);
	HINSTANCE hDll = GetModuleHandleW(L"ntdll.dll");
	lpAddFun addFun = (lpAddFun)GetProcAddress(hDll, "RtlInitUnicodeString");
	if (addFun != NULL)
	{
		ret = addFun(DestinationString, SourceString);
	}
	return ret;
}

NTSTATUS
NTAPI
RtlFreeUnicodeString(
	IN PUNICODE_STRING UnicodeString
)
{
	NTSTATUS ret = NULL;
	typedef NTSTATUS(WINAPI* lpAddFun)(PUNICODE_STRING);
	HINSTANCE hDll = GetModuleHandleW(L"ntdll.dll");
	lpAddFun addFun = (lpAddFun)GetProcAddress(hDll, "RtlFreeUnicodeString");
	if (addFun != NULL)
	{
		ret = addFun(UnicodeString);
	}
	return ret;
}

void RtlFreeAnsiString(
	PANSI_STRING AnsiString
)
{
	typedef void (WINAPI* lpAddFun)(PANSI_STRING);
	HINSTANCE hDll = GetModuleHandleW(L"ntdll.dll");
	lpAddFun addFun = (lpAddFun)GetProcAddress(hDll, "RtlFreeAnsiString");
	if (addFun != NULL)
	{
		return addFun(AnsiString);
	}
}

NTSTATUS RtlUnicodeStringToAnsiString(
	PANSI_STRING     DestinationString,
	PCUNICODE_STRING SourceString,
	BOOLEAN          AllocateDestinationString
)
{
	NTSTATUS ret = NULL;
	typedef NTSTATUS(WINAPI * lpAddFun)(PANSI_STRING, PCUNICODE_STRING, BOOLEAN);
	HINSTANCE hDll = GetModuleHandleW(L"ntdll.dll");
	lpAddFun addFun = (lpAddFun)GetProcAddress(hDll, "RtlUnicodeStringToAnsiString");
	if (addFun != NULL)
	{
		ret = addFun(DestinationString, SourceString, AllocateDestinationString);
	}
	return ret;
}

NTSTATUS
NTAPI
RtlDosPathNameToNtPathName_U(
	IN PCWSTR DosPathName,
	OUT PUNICODE_STRING NtPathName,
	OUT PCWSTR* NtFileNamePart,
	OUT CURDIR* DirectoryInfo
)
{
	NTSTATUS ret = NULL;
	typedef NTSTATUS(WINAPI* lpAddFun)(PCWSTR, PUNICODE_STRING, PCWSTR*, CURDIR*);
	HINSTANCE hDll = GetModuleHandleW(L"ntdll.dll");
	lpAddFun addFun = (lpAddFun)GetProcAddress(hDll, "RtlDosPathNameToNtPathName_U");
	if (addFun != NULL)
	{
		ret = addFun(DosPathName, NtPathName, NtFileNamePart, DirectoryInfo);
	}
	return ret;
}

//SIZE_T
//RtlCompareMemory(
//	IN CONST VOID* Source1,
//	IN CONST VOID* Source2,
//	IN SIZE_T  Length
//)
//{
//	SIZE_T ret = NULL;
//	typedef SIZE_T(* lpAddFun)(IN CONST VOID*, IN CONST VOID*, IN SIZE_T);
//	HINSTANCE hDll = GetModuleHandleW(L"ntdll.dll");
//	lpAddFun addFun = (lpAddFun)GetProcAddress(hDll, "RtlCompareMemory");
//	if (addFun != NULL)
//	{
//		ret = addFun(Source1, Source2, Length);
//	}
//	return ret;
//}